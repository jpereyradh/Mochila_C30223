a. El sistema de control de versiones Git fue creado por Linus Torvalds en 2005. Lo creó como una respuesta a
las limitaciones que encontraba en otros sistemas de control de versiones disponibles en ese momento, como CVS
o Subversion. En particular, quería un sistema que fuera rápido, eficiente y pudiera manejar proyectos muy
grandes de manera efectiva. Además, como desarrollador de Linux, necesitaba una herramienta que pudiera manejar
el desarrollo colaborativo a gran escala, con muchos desarrolladores trabajando simultáneamente en el mismo
código fuente. Por lo tanto, creó Git como una herramienta que pudiera satisfacer estas necesidades y permitir
un desarrollo más eficiente y colaborativo de software.

b. GitHub fue adquirido por Microsoft en 2018 por un monto de 7.5 mil millones de dólares. La adquisición fue
vista como una gran oportunidad para Microsoft para expandir su presencia en la comunidad de desarrolladores y
en el mercado de la tecnología en general. Además, la adquisición también proporcionó a Microsoft acceso a una gran
cantidad de datos y código fuente de proyectos importantes alojados en GitHub, lo que le permitió mejorar sus
propias herramientas y servicios para desarrolladores.

c. Sí, hay varias formas de trabajar con GitHub que no requieren el uso de la línea de comandos o la terminal:

GitHub Desktop: es una aplicación de escritorio que proporciona una interfaz gráfica de usuario (GUI) para trabajar
con repositorios de GitHub. Permite realizar muchas de las operaciones básicas de Git, como clonar repositorios,
crear ramas, hacer commits y realizar merge requests, todo a través de una interfaz visual.

Interfaz web de GitHub: la plataforma GitHub ofrece una interfaz web que permite realizar muchas operaciones,
como la creación y edición de repositorios, la revisión de cambios y la colaboración con otros desarrolladores.
También es posible realizar ciertas operaciones avanzadas, como la gestión de conflictos de merge, directamente
desde la interfaz web.

Extensiones y plugins: hay varias extensiones y plugins disponibles para editores de código populares como Visual
Studio Code, Atom y Sublime Text que permiten integrar Git y GitHub en el flujo de trabajo de desarrollo. Estas
herramientas ofrecen características como la gestión de ramas y commits, la revisión de cambios y la integración
con GitHub Issues y Pull Requests, todo sin tener que abandonar el editor de código.

En resumen, hay varias formas de trabajar con GitHub que no implican el uso de la línea de comandos o la terminal,
lo que hace que sea más accesible para aquellos que prefieren una interfaz gráfica de usuario o que no tienen
experiencia con la línea de comandos.